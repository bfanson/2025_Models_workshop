{
  "articles": [
    {
      "path": "about.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore You Start\r\nPackage Dependencies\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\n‚Ä¶and maybe a refresher on R as well??\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nFor f*sake, now what is this Github thing?\r\nNow, my brain hurts‚Ä¶\r\n\r\nBefore You Start\r\nYou will need R installed on your machine. If your R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. Using R is made much easier by using it through RStudio (_I_ntegrated _D_evelopment _E_nvironment).\r\nIf you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already. You should also have Rtools installed.\r\nTo install, the order of steps are as below:\r\nInstall R (> 4.0.0): https://cran.rstudio.com/\r\ninstall to ‚ÄòC:\\Windows\\program files‚Äô and accept all defaults\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\n‚Ä¶and maybe a refresher on R as well??\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nswitch from Rstudio to Posit‚Ä¶https://posit.co/\r\nRmarkdown to Quarto\r\nRstudio IDE to Positron https://github.com/posit-dev/positron/wiki\r\n\r\nFor f*sake, now what is this Github thing?\r\ncouple notes on navigating Github‚Ä¶https://github.com/bfanson\r\nNow, my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:06+10:00"
    },
    {
      "path": "course_overview.html",
      "title": "Overview of workshop",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nAcknowledgement of country\r\nWorkshop Structure\r\nWhat the workshop is trying to do\r\nWhat is it NOT trying to do\r\nWhat to expect\r\nApproach\r\nMay need to take a step-back at times\r\n\r\nCourse Website\r\nPlug for QEARI\r\nWhat to do when my brain hurts‚Ä¶\r\n\r\nAcknowledgement of country\r\nI would like to begin by acknowledging the traditional owners of the land on which we are meeting today, the Wurundjeri people of the Kulin Nation, and pay my respects to their Elders past, present and emerging.\r\nWorkshop Structure\r\nThis is a 4-day workshop ( SEP16-19 2024) with each day running from 9am-12pm. During each day‚Äôs session, we will cover a new topic in the workflow pipeline.\r\nMonday: Overview of workflow, importing, cleaning (Ben)\r\nTuesday: Analysis of data (Paul)\r\nWednesday: Creating reports (Paul)\r\nThursday: Creating shiny Apps (Ben)\r\nWithin each day, the session is structured to be mainly ‚Äòtalk-and-chalk‚Äô for the first half and then more hands-on for the second half.\r\n** Notes **\r\nWe will not be offended if you just stay for the first half\r\nAsk questions anytime. Most likely someone else will have the same question. We may defer the question to hands-on section if it is too much of rabbit-hole.\r\nWe will have a wide range of skills across the days\r\nMost Importantly, tea will be provided!! üòÄ\r\nWhat the workshop is trying to do\r\nBecome familiar with data analyst workflow\r\nLearn a workflow from data cleaning to analysis to presenting/communicating results in one platform\r\nIncrease your knowledge about the R workflow, resources, and capabilities üëç\r\nProvide a resource to refer to to help remind you how to get going\r\nWhat is it NOT trying to do\r\nTurn you into a R programmer/Shiny app developer in 4 days\r\nGoing in-depth into any specific topic (except R workflow)\r\nMake you cry üò¢\r\nWhat to expect\r\nApproach\r\nCompared to when we started providing biometrics workshops, the amount of resources and online learning tools has exploded. Partly as a consequence, there has been a homogenization of workflow driven by key leaders in the area that have pushed the technology and analysis paradigms.\r\nGiven this, we will attempt in this workshop to act more as a guide to help you develop a solid framework that you can use as a launching point. We will point out amazing resources out but also hoping that the workshop will give you the foundation to dive deeper into the topics specific to your research/needs. Part of this is introducing to you to tools/concepts as well as introducing to the terminology in R workflows.\r\nMay need to take a step-back at times\r\nFor some, the last two days of the workshop might push their limits but the skills in these session are becoming more important as the expectation of how we communicate our research grows and evolves.\r\nOn Day 3 (creating reports), the Quarto(/Rmarkdown) approach takes a bit to get used to if you are used to WYSIWYG (What You See Is What You Get). The key is to focus on the higher level concepts (e.g.¬†focusing on the higher level concepts of how it could be useful for your research). Most importantly, once you have a template to work from and understand key fundamentals, you can easily modify (often having no clue how most of it works‚Ä¶my approach for years to be honest).\r\nNow, for Day 4 (Shiny Apps), Shiny is going to look, frustratingly, different as shown below:\r\n\r\n\r\nShow code\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  fluidRow( \r\n    selectInput('x','X-Variable', choices = names(mtcars)),\r\n    selectInput('y','Y-Variable', choices = names(mtcars)),\r\n    plotOutput('plot') \r\n)\r\n)\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  output$plot <- renderPlot({\r\n    plot( mtcars[,input$x], mtcars[,input$y] )\r\n    \r\n  })\r\n}# Run the application \r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\nHowever, shiny apps have a very basic structure and once you get that (and a few other key bits), you can often grab other people‚Äôs code and modify slightly to get what you need.\r\nReminder - The goal here is not to make you a programmer but familiar with a few key tools so that you can tinker away.\r\nCourse Website\r\nObviously, there is a course website. For those that attended the masterclass on R spatial capabilities orchestrated by Justin Cally, the website design will be familiar. It is a blog-centric website and we will add each day‚Äôs lecture the morning of.\r\n\r\nWebsite is built using distill package and hosted by github pages\r\nBy the nature of this workshop, we have limited time and cannot go in-depth. Therefore, we have tried to distill out the key concepts/steps in the course notes, but there might be topics that need additional explanation and examples. If so, Paul and I are happy to write up a short-blurp about it and post it on the ‚ÄúExtra topics‚Äù in the upper right.\r\nPlug for QEARI\r\nJust a reminder QEARI (Quantitative Ecology ARI) is a great resource and a safe place for asking ‚Äúdumb‚Äù questions. The amount of expertise among its regulars is impressive! There are multiple channels to ask questions including a new one for shiny Apps!!!\r\n\r\nWhat to do when my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:19+10:00"
    },
    {
      "path": "dataset.html",
      "title": "Workshop Dataset",
      "author": [],
      "contents": "\r\n\r\nContents\r\nProject data\r\nProject overview\r\nPurpose\r\nExperimental design\r\nStudy sites\r\nMonitoring\r\nDesign variables\r\n\r\n\r\nData provided\r\nOverview\r\nWorkshop 2024 data.xls\r\nsite_info tab\r\n\r\n\r\n\r\nProject data\r\nFor the workshop, we will be using a greatly reduced dataset from the Wetland Intervention Monitoring Projects (WIMP; thanks Kay Morris üëè).\r\n\r\nWe have done some masking of data\r\nEach day we will provide a Rstudio project that will have the data as well. If you want to start from scratch, click on link below to download project data files and go from there.\r\n\r\n\r\n Download project data\r\n\r\n\r\n\r\nProject overview\r\nPurpose\r\nGoal: Improve grazing management\r\nQuestion: How does grazing intensity affect wetland plants?\r\nFramework: The ecological framework underpinning this study is the Intermediate Disturbance Hypothesis.\r\nGrazing treatment: Here, we focus on two types of grazing: Press (low intensity for longer) and Crash (high intensity for shorter).\r\n\r\n\r\nShow code\r\n\r\n cowplot::ggdraw() + cowplot::draw_image('images/dataset/idh.PNG')\r\n\r\n\r\n\r\n\r\nExperimental design\r\nStudy sites\r\nAcross western and eastern Victoria, a total of 28 sites were selected to be surveyed. These sites were spread across four Catchment Management Authorities (CMA) but with the majority of sites in the western CMAs. Sites were chosen partly to cover a wide variation in grazing intensity and grazing treatment.\r\n\r\n\r\nShow code\r\n\r\n  # sf_site <- sf::read_sf('data/sf_site.gpkg') %>% select(-transect_id)\r\n  # # sf_cma <- VicmapR::vicmap_query(layer='open-data-platform:cma100') %>% VicmapR::collect()\r\n  # sf_cma <- sf::read_sf('data/sf_cma.gpkg')  \r\n  # mapview::mapview(sf_cma, zcol='cmaname', layer.name='cma') + \r\n  #   mapview::mapview(sf_site, zcol='grazing', layer.name='site', col.regions=c('red','blue') )\r\n\r\n\r\nMonitoring\r\nIn each wetland, we are assessing how vegetation changes over time inside two trial plots. Each trial plot is about 0.25 ha in size. One plot is open to the grazing management being applied in the wetland and the other plot is fenced to exclude livestock (sheep and cattle). Monitoring is done when the wetland is drying out but still wet as this is the when most wetland plants are present. Monitoring is done along transects and quadrats in each plot before fencing, and then every year after fencing for 3-5 years.\r\n\r\nDesign variables\r\nSo, we have a hierarchical experimental design: site/plot/transect/quadrant. First we have the site-level. At this level, we have the grazing treatments: Crash (intense grazing, shorter) and Press (less intense, longer). Next, we have a paired design within a site with fence. Within plot we have transects and within transect, quadrats.\r\nAt the quadrat level, a large suite of responses were measured in this study. For the workshop we will focus on two response metrics measured at the quadrat level:\r\nNative species richness: total number of native species (summarised by transect-level)\r\nMaximum plant height: measured the tallest plant in the quadrat\r\n\r\nData provided\r\nOverview\r\nWe have three files:\r\nWorkshop 2024 data.xls - this is our main file\r\ndf_survey_info.csv - this contains survey info, such as date\r\ndf_quad_spp.csv - this includes extra quadrat-level about species present\r\nLet‚Äôs take a look at snapshot of each file\r\nWorkshop 2024 data.xls\r\nThis workbook has four tabs of data.\r\nsite_info tab\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:21+10:00"
    },
    {
      "path": "evaluation.html",
      "title": "Workshop evaluation",
      "description": "Evaluation of workshop",
      "author": [],
      "contents": "\r\nBelow is a shiny App used for the course evaluation created using shinysurveys package with data saved in Gdrive\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:22+10:00"
    },
    {
      "path": "help_ai.html",
      "title": "Using AI",
      "author": [],
      "contents": "\r\n\r\nContents\r\nUsing Artifical Intelligence (AI) for coding\r\nA few AI options\r\nTips for working with AI\r\nCopilot examples\r\n\r\n\r\nUsing Artifical Intelligence (AI) for coding\r\nAI is becoming useful coding tool. I have found myself using more and more to find code examples that something I just cannot find using Google. It has probably become my go to for finding R coding information.\r\nThere are lots of AI platforms out there and have not used most. The one I use most is Copilot (Microsoft) since we get access to that through DEECA.\r\nA few AI options\r\nBelow is a list of a few AI that I have tinkered with (except Copilot (Github) but been recommended to me). [If someone has one that they find really useful, let me know and I can add here].\r\nCopilot (Microsoft): allrounder AI which we have a free subscription at ARI. It does a decent job [I use this one daily]\r\nChatGPT: another allrounder similar to Copilot\r\nClaude: prefer this one for writing text but seems to work well for programming as well\r\nCopilot-GitHub: paid subscription but supposedly really good for programming\r\nTips for working with AI\r\nFor those not regularly using AI, there are a few things that can help when running your searches for help:\r\nInclude specifics: when asking for an example, include lots of specific to get closer to what you want. You may want to tell it to use only tidyverse functions for the example code or a certain package.\r\nBuilt-in datasets: if possible, ask it to use a built-in dataset for the example so that I can check it right away in R\r\nExperiment and Iterate: Don‚Äôt be afraid to experiment with the code generated by AI. Modify it, run it, and see what happens. If something is not working, you can ask AI to proofread its own code and sometimes it can fix it.\r\nUse AI for Debugging: If you encounter errors, AI tools can help you debug your code. They can suggest fixes and optimizations, making the debugging process less daunting.\r\nCopilot examples\r\nTo you Copilot, go to copilot.\r\nBelow are a couple examples‚Ä¶\r\ntype‚Ä¶‚Äúin R and using mtcars dataset show me how to get the mean mpg by each cyl level?‚Äù - if it used the aggregate() function, type the followup: ‚Äúcan you use tidyverse functions instead?‚Äù\r\nExample of the output\r\n\r\ntype‚Ä¶‚Äúbuild me a R shiny app UI that has four tabs in the main panel and a side panel that has four user inputs. One input for grazing type, one for fence type, one for year, and one for wetland type‚Äù\r\nI got a working interface‚Ä¶\r\n\r\n\r\nBelow is the code AI gave me‚Ä¶see day 4 lecture for explanation of code.\r\n\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Grazing and Wetland Management\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      selectInput(\"grazing\", \"Grazing Type:\", \r\n                  choices = c(\"Rotational\", \"Continuous\", \"Deferred\")),\r\n      selectInput(\"fence\", \"Fence Type:\", \r\n                  choices = c(\"Electric\", \"Barbed Wire\", \"Wooden\")),\r\n      numericInput(\"year\", \"Year:\", value = 2024, min = 2000, max = 2100),\r\n      selectInput(\"wetland\", \"Wetland Type:\", \r\n                  choices = c(\"Marsh\", \"Swamp\", \"Bog\", \"Fen\"))\r\n    ),\r\n    \r\n    mainPanel(\r\n      tabsetPanel(\r\n        tabPanel(\"Tab 1\", h3(\"Content for Tab 1\")),\r\n        tabPanel(\"Tab 2\", h3(\"Content for Tab 2\")),\r\n        tabPanel(\"Tab 3\", h3(\"Content for Tab 3\")),\r\n        tabPanel(\"Tab 4\", h3(\"Content for Tab 4\"))\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  # Server logic will go here\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:24+10:00"
    },
    {
      "path": "help_bayes.html",
      "title": "Tips on Bayesian approach",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBayesian\r\nA few AI options\r\nTips for working with AI\r\nCopilot examples\r\n\r\n\r\nBayesian\r\nREST OF BELOW IS TEMPLATE FROM AI help page\r\nA few AI options\r\nBelow is a list of a few AI that I have tinkered with (except Copilot (Github) but been recommended to me). [If someone has one that they find really useful, let me know and I can add here].\r\nCopilot (Microsoft): allrounder AI which we have a free subscription at ARI. It does a decent job [I use this one daily]\r\nChatGPT: another allrounder similar to Copilot\r\nClaude: prefer this one for writing text but seems to work well for programming as well\r\nCopilot-GitHub: paid subscription but supposedly really good for programming\r\nTips for working with AI\r\nFor those not regularly using AI, there are a few things that can help when running your searches for help:\r\nInclude specifics: when asking for an example, include lots of specific to get closer to what you want. You may want to tell it to use only tidyverse functions for the example code or a certain package.\r\nBuilt-in datasets: if possible, ask it to use a built-in dataset for the example so that I can check it right away in R\r\nExperiment and Iterate: Don‚Äôt be afraid to experiment with the code generated by AI. Modify it, run it, and see what happens. If something is not working, you can ask AI to proofread its own code and sometimes it can fix it.\r\nUse AI for Debugging: If you encounter errors, AI tools can help you debug your code. They can suggest fixes and optimizations, making the debugging process less daunting.\r\nCopilot examples\r\nTo you Copilot, go to copilot.\r\nBelow are a couple examples‚Ä¶\r\ntype‚Ä¶‚Äúin R and using mtcars dataset show me how to get the mean mpg by each cyl level?‚Äù - if it used the aggregate() function, type the followup: ‚Äúcan you use tidyverse functions instead?‚Äù\r\nExample of the output\r\n\r\ntype‚Ä¶‚Äúbuild me a R shiny app UI that has four tabs in the main panel and a side panel that has four user inputs. One input for grazing type, one for fence type, one for year, and one for wetland type‚Äù\r\nI got a working interface‚Ä¶\r\n\r\n\r\nBelow is the code AI gave me‚Ä¶see day 4 lecture for explanation of code.\r\n\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Grazing and Wetland Management\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      selectInput(\"grazing\", \"Grazing Type:\", \r\n                  choices = c(\"Rotational\", \"Continuous\", \"Deferred\")),\r\n      selectInput(\"fence\", \"Fence Type:\", \r\n                  choices = c(\"Electric\", \"Barbed Wire\", \"Wooden\")),\r\n      numericInput(\"year\", \"Year:\", value = 2024, min = 2000, max = 2100),\r\n      selectInput(\"wetland\", \"Wetland Type:\", \r\n                  choices = c(\"Marsh\", \"Swamp\", \"Bog\", \"Fen\"))\r\n    ),\r\n    \r\n    mainPanel(\r\n      tabsetPanel(\r\n        tabPanel(\"Tab 1\", h3(\"Content for Tab 1\")),\r\n        tabPanel(\"Tab 2\", h3(\"Content for Tab 2\")),\r\n        tabPanel(\"Tab 3\", h3(\"Content for Tab 3\")),\r\n        tabPanel(\"Tab 4\", h3(\"Content for Tab 4\"))\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  # Server logic will go here\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:25+10:00"
    },
    {
      "path": "help_ggplot2.html",
      "title": "Notes on ggplot2",
      "author": [],
      "contents": "\r\n\r\nContents\r\nOverview\r\nggplot()\r\ngeoms (geometric shape)\r\nformatting\r\ngrouping variables within a panel\r\nfaceting (multi-panel)\r\n\r\ninteractive\r\nconvert to plotly\r\nggiraph\r\n\r\nanimate\r\n\r\nBelow is just a coarse overview of ggplot2. See the following ggplot tutorial for more examples. Lots of other tutorials out there.\r\nOverview\r\nggplot()\r\nAll plots start with ggplot() function. In this function, you tell it what data to use for all added layers and what are the x/y variables. Here, I will plot hp (horsepower) vs mpg (miles per gallon).\r\n\r\n\r\n#  head(mtcars) # have a look at\r\n  ggplot( mtcars, aes(x=hp, y=mpg) )\r\n\r\n\r\n\r\ngeoms (geometric shape)\r\nAbove shows the setup of the plot, it has no points/lines (aka geometric shapes) because we have not specified geom_xxx() (e.g.¬†geom_point, geom_line(), geom_boxplot)\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg) ) +  # notice you can drop x=,y=\r\n      geom_point()  # new layer to add points\r\n\r\n\r\n\r\nYou can change attributes for the point\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg) ) +  \r\n      geom_point( color='red', shape=4, size=3)  # change attributes\r\n\r\n\r\n\r\nYou can just add more and more layers. You might want to add a smoother.\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg) ) +\r\n      geom_point() +\r\n      geom_smooth()  # add a smoother/relationship\r\n\r\n\r\n\r\nformatting\r\nNow, let‚Äôs see some basic changes that you might want to do‚Ä¶\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg) ) +\r\n      geom_point() +\r\n      geom_smooth(fill='blue', alpha=0.2 ) + # change color of the error band\r\n        labs( x='Horsepower', y='MPG', title='Title') + # add in some labels\r\n        ylim(0,40)  # set y-axis limits\r\n\r\n\r\n\r\nThere are different theme_xxx() in ggplot to change how the graph looks‚Ä¶\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg) ) +\r\n      geom_point() +\r\n      geom_smooth(fill='blue', alpha=0.2 ) + \r\n        labs( x='Horsepower', y='MPG', title='Title') +\r\n        ylim(0,40) +\r\n        theme_classic()  # there are themes that change overall formatting... type theme_ and see what autofills\r\n\r\n\r\n\r\ngrouping variables within a panel\r\nOften you want to break a graph apart by a group variable (like a treatment factor). You can do this by setting an attribute: color=,alpha= (transparency), size= (makes a bubble plot).\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg, color=factor(cyl) ) ) + # using factor to turn cyl from numeric to character/factor\r\n      geom_point() +\r\n      geom_smooth( method='lm')  # running linear model\r\n\r\n\r\n\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg ) ) + # using factor to turn cyl from numeric to character/factor\r\n      geom_point( aes(size=factor(cyl), color=factor(cyl) ) ) + # I am going to add here so only point change\r\n      geom_smooth( method='lm')  # running linear model\r\n\r\n\r\n\r\nfaceting (multi-panel)\r\nFor one variable you can use facet_wrap(~group) or facet_grid(~group). For two variables, use facet_grid(grp_1~grp_2)\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg, color=factor(cyl) ) ) + \r\n      geom_point() +\r\n      geom_smooth( method='lm') + \r\n        facet_wrap(~cyl, ncol=2)  # added a variable to break up \r\n\r\n\r\n\r\nThe facet_grid() is setup that the first variable determines row and second the column [facet_grid(row ~ column)]\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg, color=factor(cyl) ) ) + \r\n      geom_point() +\r\n      geom_smooth( method='lm') + \r\n        facet_grid(~cyl, scales='free_x') \r\n\r\n\r\n\r\n\r\n\r\n  ggplot( mtcars, aes(hp, mpg, color=factor(cyl) ) ) + \r\n      geom_point() +\r\n      geom_smooth( method='lm') + \r\n        facet_grid(cyl~vs)  # added a variable to break up two variables\r\n\r\n\r\n\r\ninteractive\r\nFor interactive ggplots, there are packages that convert a ggplot object to an interactive object. See two packages below:\r\nconvert to plotly\r\nNow, plotly package does a great job at interactive plots. You can write you code in ggplot and then just convert as shown in code below.\r\n\r\n\r\n  library(ggplot2)\r\n  library(plotly)\r\n  f <- ggplot( cars, aes(speed, dist)  ) + geom_point() + geom_smooth()\r\n   plotly::ggplotly(f)\r\n\r\n\r\n\r\nggiraph\r\nggiraph package\r\n\r\n\r\nlibrary(ggiraph)\r\nlibrary(tidyverse)\r\nlibrary(patchwork)\r\n\r\nmtcars_db <- rownames_to_column(mtcars, var = \"carname\")\r\n\r\n# First plot: Scatter plot\r\nfig_pt <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = disp, y = qsec,\r\n    tooltip = carname, data_id = carname\r\n  )\r\n) +\r\n  geom_point_interactive(\r\n    size = 3, hover_nearest = TRUE\r\n  ) +\r\n  labs(\r\n    title = \"Displacement vs Quarter Mile\",\r\n    x = \"Displacement\", y = \"Quarter Mile\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Second plot: Bar plot\r\nfig_bar <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = reorder(carname, mpg), y = mpg,\r\n    tooltip = paste(\"Car:\", carname, \"<br>MPG:\", mpg),\r\n    data_id = carname\r\n  )\r\n) +\r\n  geom_col_interactive(fill = \"skyblue\") +\r\n  coord_flip() +\r\n  labs(\r\n    title = \"Miles per Gallon by Car\",\r\n    x = \"Car\", y = \"Miles per Gallon\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Combine the plots using patchwork\r\n combined_plot <- fig_pt + fig_bar + plot_layout(ncol = 2) \r\n\r\n# Combine the plots using cowplot\r\n# combined_plot <- cowplot::plot_grid(fig_pt, fig_bar, ncol=2) \r\n\r\n# Create a single interactive plot with both subplots\r\ninteractive_plot <- girafe(ggobj = combined_plot)\r\n\r\n# Set options for the interactive plot\r\ngirafe_options(\r\n  interactive_plot,\r\n  opts_hover(css = \"fill:cyan;stroke:black;cursor:pointer;\"),\r\n  opts_selection(type = \"single\", css = \"fill:red;stroke:black;\")\r\n)\r\n\r\n\r\n\r\nanimate\r\nCheck out ggnimate to see a tutorial\r\nExample showing strontium profiles over life of a fish and likely location.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:44+10:00"
    },
    {
      "path": "help_github.html",
      "title": "Notes on github",
      "author": [],
      "contents": "\r\n\r\nContents\r\nVersion Control: Git/Github [Advanced]\r\n\r\nVersion Control: Git/Github [Advanced]\r\nAs part of my due-diligence, I have to mention version control. In short, version control is external software that keeps track of all your changes (so you can go back if something breaks in your code) and very helpful with collaborations (e.g.¬†allowing you both code away and then merging those changes).\r\nFor R/Rstudio, Git/Github is the most popular. Now, Git is the version control software locally on your computer and it does the tracking of all changes In contrast, Github is an online platform in which you can upload those changes (and project folder/files) and is mainly useful for the collaboration/sharing (plus some other useful features)\r\nKey points on Git/Github:\r\nIf not collaborating, the overhead of Git (learning, initial setup, random breaks) might not worth it to you. You still have version histories via Onedrive to save you (not as easy to shift through as Git).\r\nIf collaborating, it really is the best approach that will save you effort in the long run.\r\nIt is worth playing around with Github online so you know how to navigate the website (this workshop will help with that). Github is a rich resource with example code and useful packages not on CRAN. Github project (aka repositories) can look intimidating at first.\r\nRstudio has git integration that makes it easier to work with, though the github desktop\r\nGithub has Github pages which is hosting this website [workflow: 1) write RMD files in Rstudio; 2) upload to Github; 3) Github publishes at https:username.github.io/project_id]\r\nGIT resources to get started\r\nCheatsheet: https://rstudio.github.io/cheatsheets/git-github.pdf\r\nUseful book with R focus: https://happygitwithr.com/\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:45+10:00"
    },
    {
      "path": "index.html",
      "title": "Daily Sesssions",
      "description": "Welcome to workshop website - strap in!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:45+10:00"
    },
    {
      "path": "installR.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore the workshop\r\nPackage Dependencies\r\n\r\nBefore the workshop\r\nYou will need R installed on your machine. If your current R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. but using R is made much easier by using it through RStudio which is an IDE (Integrated Development Environment). Therefore, you will need to install Rstudio as well. Finally, you will need something called rtools to help install certain packages in R.\r\nNote - If you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already.\r\nTo install, the order of steps are as follows (for DEECA computers):\r\nInstall R go to https://cran.rstudio.com/ and do the following:\r\nclick ‚ÄúDownload R for Windows‚Äù\r\n\r\nclick ‚Äúbase‚Äù\r\n\r\nclick ‚ÄòDownload R-4.4.1 for Windows‚Äô\r\n\r\nclick the downloaded ‚ÄòR-4.4.1-win.exe‚Äô to start install\r\nwhen you get to install locations, install to ‚ÄòC:\\Windows\\Program Files‚Äô\r\n\r\naccept all defaults along the way\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\nclick on ‚ÄòRTools 4.4‚Äô\r\n\r\nScroll down until you see ‚ÄòRtools44 Installer‚Äô and click on it:\r\n\r\nClick on the downloaded ‚Äòrtools44-6104-6039.exe‚Äô to start install\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\nclick on ‚ÄòDownload Rstudio‚Ä¶.‚Äô button\r\n\r\nclick on ‚ÄòRStudio-2024.04.2-764.exe‚Äô\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô like rtools and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\n\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nFor newbies, click on ‚Äòinstall‚Äô button in the Packages tab in lower right. Then write in ‚Äòtidyverse‚Äô and click ‚ÄòInstall‚Äô\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2025-08-20T13:24:46+10:00"
    }
  ],
  "collections": ["sessions/sessions.json"]
}
